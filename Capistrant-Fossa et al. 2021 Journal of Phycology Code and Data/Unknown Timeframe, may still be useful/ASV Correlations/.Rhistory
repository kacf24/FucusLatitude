mdy_hm(ib1$DateTime)
ib1<-mdy_hm(ib1$DateTime)
ib1 <- read_csv("~/Desktop/iButtonAnalysis/new_ibuttons/Summer2016/Beaufort/2_BeaufortWinterSummer2016.csv")
ib1 <- read_csv("~/Desktop/iButtonAnalysis/new_ibuttons/Summer2016/Beaufort/2_BeaufortWinterSummer2016.csv")
ib2 <- read_csv("~/Desktop/iButtonAnalysis/new_ibuttons/Summer2016/Beaufort/4_BeaufortWinterSummer2016.csv")
ib1$DateTime<-mdy_hm(ib1$DateTime)
ib2$DateTime<-mdy_hm(ib2$DateTime)
plot(y=ib1$Value,x=ib1$Step,type='l')
points(y=ib2$Value,x=ib2$Step,type='l',col="red")
plot(y=ib1$Value,x=ib1$DateTime,type='l')
points(y=ib2$Value,x=ib2$DateTime,type='l',col="red")
View(ib1)
ib1 <- ib1[995:1445,]
ib2 <- ib2[995:1445,]
ib1$DateTime<-mdy_hm(ib1$DateTime)
ib1 <- read_csv("~/Desktop/iButtonAnalysis/new_ibuttons/Summer2016/Beaufort/2_BeaufortWinterSummer2016.csv")
ib2 <- read_csv("~/Desktop/iButtonAnalysis/new_ibuttons/Summer2016/Beaufort/4_BeaufortWinterSummer2016.csv")
ib1 <- ib1[995:1445,]
ib2 <- ib2[995:1445,]
ib1$DateTime<-mdy_hm(ib1$DateTime)
ib2$DateTime<-mdy_hm(ib2$DateTime)
plot(y=ib1$Value,x=ib1$DateTime,type='l')
points(y=ib2$Value,x=ib2$DateTime,type='l',col="red")
library(readr)
library(lubridate)
library(TideHarmonics)
library(esquisse)
#Read in all Important Files
TidalSites <- read_csv("~/Desktop/CoveredExposedComparisons/TidalSites.csv")
Beaufort <- read_csv("~/Desktop/CoveredExposedComparisons/Beaufort.csv", col_types = cols(DateTime = col_datetime(format = "%m/%d/%y %H:%M")), locale = locale(tz = "America/New_York"))
Lewes <- read_csv("~/Desktop/CoveredExposedComparisons/Lewes.csv", col_types = cols(DateTime = col_datetime(format = "%m/%d/%y %H:%M")), locale = locale(tz = "America/New_York"))
Schoodic <- read_csv("~/Desktop/CoveredExposedComparisons/Schoodic.csv", col_types = cols(DateTime = col_datetime(format = "%m/%d/%y %H:%M")), locale = locale(tz = "America/New_York"))
Halifax <- read_csv("~/Desktop/CoveredExposedComparisons/Halifax.csv", col_types = cols(DateTime = col_datetime(format = "%m/%d/%y %H:%M")), locale = locale(tz = "America/New_York"))
Amorosa <- read_csv("~/Desktop/CoveredExposedComparisons/Amorosa.csv", col_types = cols(DateTime = col_datetime(format = "%m/%d/%y %H:%M")), locale = locale(tz = "Europe/Lisbon"))
Viana <- read_csv("~/Desktop/CoveredExposedComparisons/Viana.csv", col_types = cols(DateTime = col_datetime(format = "%m/%d/%y %H:%M")), locale = locale(tz = "Europe/Lisbon"))
Minehead <- read_csv("~/Desktop/CoveredExposedComparisons/Minehead.csv", col_types = cols(DateTime = col_datetime(format = "%m/%d/%y %H:%M")), locale = locale(tz = "Europe/London"))
Cadiz <- read_csv("~/Desktop/CoveredExposedComparisons/Cadiz.csv", col_types = cols(DateTime = col_datetime(format = "%m/%d/%y %H:%M")), locale = locale(tz = "Europe/Brussels"))
#Convert to data frame format, I don't like tibbles
TidalSites <- data.frame(TidalSites)
Beaufort <- data.frame(Beaufort)
Lewes <- data.frame(Lewes)
Schoodic <- data.frame(Schoodic)
Halifax <- data.frame(Halifax)
Amorosa <- data.frame(Amorosa)
Viana <- data.frame(Viana)
Minehead <- data.frame(Minehead)
Cadiz <- data.frame(Cadiz)
.tide.fixed <- function(theurl,year, location=0, latitude=NA, longitude=NA, tz="") {
dest <- paste(tempdir(), "/tide.html", sep="")
download.file(theurl, dest, quiet = TRUE)
tables <- XML::readHTMLTable(dest, header=TRUE, stringsAsFactors = FALSE)
# tables <- XML::readHTMLTable(theurl, stringsAsFactors=FALSE)
n.rows <- lapply(tables, function(t) dim(t)[1])
n.rows <- lapply(n.rows, function(t) {ifelse(is.null(t), 1, t)})
n.rows <- unlist(n.rows)
tl <- Sys.getlocale(category = "LC_TIME")
Sys.setlocale(category = "LC_TIME", locale = gsub(".._..(.+)", "en_US\\1", tl) )
Tide.Calendar <- data.frame(Date.time=as.POSIXlt(character(0)), Level=numeric(0), Tide=character(0))
months <- which(n.rows>27)
month <- 1
for (month in 1:12) {
table <- tables[[months[month]]]
table[,3]<- gsub("âˆ’","-",table[,3])
table[,5]<- gsub("âˆ’","-",table[,5])
Date <- paste0(year,"-", ifelse(month<10, "0", ""), as.character(month), "-", gsub(" ", "0", gsub("... (..)", "\\1", table[,1])))
# Read morning high tide
for (col in 2:6) {
Time <- gsub("([0-9]+:[0-9]+ [AP]M) .+", "\\1", table[,col])
Date.Time <- strptime(paste(Date, Time), format="%Y-%m-%d %I:%M %p", tz=tz)
metric <- TRUE
Level2 <- gsub("[0-9]+:[0-9]+ [AP]M .+ (-?[\\.0-9]+) m", "\\1", table[,col])
if (identical(table[,col], Level2)) {
Level2 <- gsub("[0-9]+:[0-9]+ [AP]M .+ (-?[\\.0-9]+) ft", "\\1", table[,col])
metric <- FALSE
}
Tide.Calendar <- rbind(Tide.Calendar, data.frame(Date.Time=Date.Time, Level=ifelse(Level2=="", NA, as.numeric(Level2)),
Tide=c("High Tide", "Low Tide", "High Tide",
"Low Tide", "High Tide")[col-1],
stringsAsFactors=FALSE))
}
}
Tide.Calendar <- na.omit(Tide.Calendar)
Tide.Calendar <- Tide.Calendar[order(Tide.Calendar[,1]),]
if (!metric) Tide.Calendar[, "Level"] <- Tide.Calendar[, "Level"] * 0.3048
Sys.setlocale(category = "LC_TIME", locale = tl )
return(Tide.Calendar)
}
#My Amorosa Loop
for(z in 1:max(Amorosa$SensorNumber)){
theYear<-year(Amorosa$DateTime[1])
for(x in nrow(Amorosa):1){ #Loop that gets rid of non-summer records
if(Amorosa$DateTime[x]< as.Date(paste0(theYear,"-06-01"))){Amorosa<-Amorosa[-x,]}else
if(Amorosa$DateTime[x]> as.Date(paste0(theYear,"-09-01"))){Amorosa<-Amorosa[-x,]}else
if(Amorosa$DateTime[x]< as.Date(paste0(theYear,"-08-09"))){Amorosa<-Amorosa[-x,]}
} #Ends the non-summer loop
workingSet<-subset(Amorosa,Amorosa$SensorNumber==z)
siteNumber<-TidalSites[which(TidalSites$Site=="Amorosa"),4]
tiz <- TidalSites[which(TidalSites$Site=="Amorosa"),5]
theurl <- paste0("https://tides.mobilegeographics.com/calendar/year/",siteNumber,".html?y=",theYear)
theTides<-.tide.fixed(year=theYear,theurl = theurl,tz=tiz)
TidalTimes<-seq(workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)],length.out = 1000)
tidalHarmonic <- ftide(theTides$Level, theTides$Date.Time, hc60)
TidalPoints<-predict(tidalHarmonic,workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)])
#Ends the large loop
buoy <- data.frame(TidalTimes,TidalPoints)
type <- "exposed"
rate<-NULL
for(zzz in 1:nrow(workingSet)){
rate[zzz] <- workingSet[zzz+1,3]-workingSet[zzz,3]
}
time_low <- which(rate <= -1)
t_l<-which.min(rate[time_low])
time_low <- time_low[t_l]
time_high <- time_low+1
#What point is the iButton covered at?
xxx<-1
timedif<-workingSet[time_high[xxx],1]-workingSet[time_low[xxx],1]
timedif <-timedif/2
submergedtime<- workingSet[time_low[xxx],1]+timedif
timeseq<-data.frame(submergedtime)
lvl<-buoy[which.min(abs(difftime(buoy[,1],submergedtime,units="hours"))),2]
if(type=="exposed"){buoy$uw<-buoy[,2] <= lvl}else{buoy$uw<-buoy[,2] >= lvl}
zz<-unname(tapply(which(buoy$uw==TRUE), cumsum(c(1, diff(which(buoy$uw==TRUE))) != 1), range))
xx <- data.frame(zz)
for (i in 1:nrow(xx)){
start<-unlist(xx$zz[i])[1]
end<-unlist(xx$zz[i])[2]
start=buoy[start,1]
end=buoy[end,1]
workingSet$exp<-ifelse(workingSet$DateTime >= start & workingSet$DateTime <= end,"kp","rm")
assign(paste0("Mensor",i),subset(workingSet,workingSet$exp=="kp"),envir=globalenv())
}
Kept <- do.call(rbind, lapply(paste0(rep("Mensor",nrow(xx)),seq(1,nrow(xx))), get) )
Kept<-Kept[order(Kept$DateTime),]
assign(paste0("Amarosa",z),Kept)
rm(list=ls(pattern="Mensor"),envir=globalenv())
}
#My Beaufort Loop
for(z in 1:max(Beaufort$SensorNumber)){
theYear<-year(Beaufort$DateTime[1])
for(x in nrow(Beaufort):1){ #Loop that gets rid of non-summer records
if(Beaufort$DateTime[x]< as.Date(paste0(theYear,"-06-01"))){Beaufort<-Beaufort[-x,]}else
if(Beaufort$DateTime[x]> as.Date(paste0(theYear,"-09-01"))){Beaufort<-Beaufort[-x,]}
#if(Beaufort$DateTime[x]< as.Date(paste0(theYear,"-08-09"))){Beaufort<-Beaufort[-x,]}
} #Ends the non-summer loop
workingSet<-subset(Beaufort,Beaufort$SensorNumber==z)
siteNumber<-TidalSites[which(TidalSites$Site=="Beaufort"),4]
tiz <- TidalSites[which(TidalSites$Site=="Beaufort"),5]
theurl <- paste0("https://tides.mobilegeographics.com/calendar/year/",siteNumber,".html?y=",theYear)
theTides<-.tide.fixed(year=theYear,theurl = theurl,tz=tiz)
TidalTimes<-seq(workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)],length.out = 1000)
tidalHarmonic <- ftide(theTides$Level, theTides$Date.Time, hc60)
TidalPoints<-predict(tidalHarmonic,workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)])
#Ends the large loop
buoy <- data.frame(TidalTimes,TidalPoints)
type <- "exposed"
rate<-NULL
for(zzz in 1:nrow(workingSet)){
rate[zzz] <- workingSet[zzz+1,3]-workingSet[zzz,3]
}
time_low <- which(rate <= -1)
t_l<-which.min(rate[time_low])
time_low <- time_low[t_l]
time_high <- time_low+1
#What point is the iButton covered at?
xxx<-1
timedif<-workingSet[time_high[xxx],1]-workingSet[time_low[xxx],1]
timedif <-timedif/2
submergedtime<- workingSet[time_low[xxx],1]+timedif
timeseq<-data.frame(submergedtime)
lvl<-buoy[which.min(abs(difftime(buoy[,1],submergedtime,units="hours"))),2]
if(type=="exposed"){buoy$uw<-buoy[,2] <= lvl}else{buoy$uw<-buoy[,2] >= lvl}
zz<-unname(tapply(which(buoy$uw==TRUE), cumsum(c(1, diff(which(buoy$uw==TRUE))) != 1), range))
xx <- data.frame(zz)
for (i in 1:nrow(xx)){
start<-unlist(xx$zz[i])[1]
end<-unlist(xx$zz[i])[2]
start=buoy[start,1]
end=buoy[end,1]
workingSet$exp<-ifelse(workingSet$DateTime >= start & workingSet$DateTime <= end,"kp","rm")
assign(paste0("Mensor",i),subset(workingSet,workingSet$exp=="kp"),envir=globalenv())
}
Kept <- do.call(rbind, lapply(paste0(rep("Mensor",nrow(xx)),seq(1,nrow(xx))), get) )
Kept<-Kept[order(Kept$DateTime),]
assign(paste0("Beaufort",z),Kept)
rm(list=ls(pattern="Mensor"),envir=globalenv())
}
#My Cadiz Loop
for(z in 1:max(Cadiz$SensorNumber)){
theYear<-year(Cadiz$DateTime[1])
for(x in nrow(Cadiz):1){ #Loop that gets rid of non-summer records
if(Cadiz$DateTime[x]< as.Date(paste0(theYear,"-06-01"))){Cadiz<-Cadiz[-x,]}else
if(Cadiz$DateTime[x]> as.Date(paste0(theYear,"-09-01"))){Cadiz<-Cadiz[-x,]}
#if(Cadiz$DateTime[x]< as.Date(paste0(theYear,"-08-09"))){Cadiz<-Cadiz[-x,]}
} #Ends the non-summer loop
workingSet<-subset(Cadiz,Cadiz$SensorNumber==z)
siteNumber<-TidalSites[which(TidalSites$Site=="Cadiz"),4]
tiz <- TidalSites[which(TidalSites$Site=="Cadiz"),5]
theurl <- paste0("https://tides.mobilegeographics.com/calendar/year/",siteNumber,".html?y=",theYear)
theTides<-.tide.fixed(year=theYear,theurl = theurl,tz=tiz)
TidalTimes<-seq(workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)],length.out = 1000)
tidalHarmonic <- ftide(theTides$Level, theTides$Date.Time, hc60)
TidalPoints<-predict(tidalHarmonic,workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)])
#Ends the large loop
buoy <- data.frame(TidalTimes,TidalPoints)
type <- "exposed"
rate<-NULL
for(zzz in 1:nrow(workingSet)){
rate[zzz] <- workingSet[zzz+1,3]-workingSet[zzz,3]
}
time_low <- which(rate <= -1)
t_l<-which.min(rate[time_low])
time_low <- time_low[t_l]
time_high <- time_low+1
#What point is the iButton covered at?
xxx<-1
timedif<-workingSet[time_high[xxx],1]-workingSet[time_low[xxx],1]
timedif <-timedif/2
submergedtime<- workingSet[time_low[xxx],1]+timedif
timeseq<-data.frame(submergedtime)
lvl<-buoy[which.min(abs(difftime(buoy[,1],submergedtime,units="hours"))),2]
if(type=="exposed"){buoy$uw<-buoy[,2] <= lvl}else{buoy$uw<-buoy[,2] >= lvl}
zz<-unname(tapply(which(buoy$uw==TRUE), cumsum(c(1, diff(which(buoy$uw==TRUE))) != 1), range))
xx <- data.frame(zz)
for (i in 1:nrow(xx)){
start<-unlist(xx$zz[i])[1]
end<-unlist(xx$zz[i])[2]
start=buoy[start,1]
end=buoy[end,1]
workingSet$exp<-ifelse(workingSet$DateTime >= start & workingSet$DateTime <= end,"kp","rm")
assign(paste0("Mensor",i),subset(workingSet,workingSet$exp=="kp"),envir=globalenv())
}
Kept <- do.call(rbind, lapply(paste0(rep("Mensor",nrow(xx)),seq(1,nrow(xx))), get) )
Kept<-Kept[order(Kept$DateTime),]
assign(paste0("Cadiz",z),Kept)
rm(list=ls(pattern="Mensor"),envir=globalenv())
}
#My Halifax Loop
for(z in 1:max(Halifax$SensorNumber)){
theYear<-year(Halifax$DateTime[1])
for(x in nrow(Halifax):1){ #Loop that gets rid of non-summer records
if(Halifax$DateTime[x]< as.Date(paste0(theYear,"-06-01"))){Halifax<-Halifax[-x,]}else
if(Halifax$DateTime[x]> as.Date(paste0(theYear,"-09-01"))){Halifax<-Halifax[-x,]}
#if(Halifax$DateTime[x]< as.Date(paste0(theYear,"-08-09"))){Halifax<-Halifax[-x,]}
} #Ends the non-summer loop
workingSet<-subset(Halifax,Halifax$SensorNumber==z)
siteNumber<-TidalSites[which(TidalSites$Site=="Halifax"),4]
tiz <- TidalSites[which(TidalSites$Site=="Halifax"),5]
theurl <- paste0("https://tides.mobilegeographics.com/calendar/year/",siteNumber,".html?y=",theYear)
theTides<-.tide.fixed(year=theYear,theurl = theurl,tz=tiz)
TidalTimes<-seq(workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)],length.out = 1000)
tidalHarmonic <- ftide(theTides$Level, theTides$Date.Time, hc60)
TidalPoints<-predict(tidalHarmonic,workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)])
#Ends the large loop
buoy <- data.frame(TidalTimes,TidalPoints)
type <- "exposed"
rate<-NULL
for(zzz in 1:nrow(workingSet)){
rate[zzz] <- workingSet[zzz+1,3]-workingSet[zzz,3]
}
time_low <- which(rate <= -1)
t_l<-which.min(rate[time_low])
time_low <- time_low[t_l]
time_high <- time_low+1
#What point is the iButton covered at?
xxx<-1
timedif<-workingSet[time_high[xxx],1]-workingSet[time_low[xxx],1]
timedif <-timedif/2
submergedtime<- workingSet[time_low[xxx],1]+timedif
timeseq<-data.frame(submergedtime)
lvl<-buoy[which.min(abs(difftime(buoy[,1],submergedtime,units="hours"))),2]
if(type=="exposed"){buoy$uw<-buoy[,2] <= lvl}else{buoy$uw<-buoy[,2] >= lvl}
zz<-unname(tapply(which(buoy$uw==TRUE), cumsum(c(1, diff(which(buoy$uw==TRUE))) != 1), range))
xx <- data.frame(zz)
for (i in 1:nrow(xx)){
start<-unlist(xx$zz[i])[1]
end<-unlist(xx$zz[i])[2]
start=buoy[start,1]
end=buoy[end,1]
workingSet$exp<-ifelse(workingSet$DateTime >= start & workingSet$DateTime <= end,"kp","rm")
assign(paste0("Mensor",i),subset(workingSet,workingSet$exp=="kp"),envir=globalenv())
}
Kept <- do.call(rbind, lapply(paste0(rep("Mensor",nrow(xx)),seq(1,nrow(xx))), get) )
Kept<-Kept[order(Kept$DateTime),]
assign(paste0("Halifax",z),Kept)
rm(list=ls(pattern="Mensor"),envir=globalenv())
}
#My Lewes Loop
for(z in 1:max(Lewes$SensorNumber)){
theYear<-year(Lewes$DateTime[1])
for(x in nrow(Lewes):1){ #Loop that gets rid of non-summer records
if(Lewes$DateTime[x]< as.Date(paste0(theYear,"-06-01"))){Lewes<-Lewes[-x,]}else
if(Lewes$DateTime[x]> as.Date(paste0(theYear,"-09-01"))){Lewes<-Lewes[-x,]}
#if(Lewes$DateTime[x]< as.Date(paste0(theYear,"-08-09"))){Lewes<-Lewes[-x,]}
} #Ends the non-summer loop
workingSet<-subset(Lewes,Lewes$SensorNumber==z)
siteNumber<-TidalSites[which(TidalSites$Site=="Lewes"),4]
tiz <- TidalSites[which(TidalSites$Site=="Lewes"),5]
theurl <- paste0("https://tides.mobilegeographics.com/calendar/year/",siteNumber,".html?y=",theYear)
theTides<-.tide.fixed(year=theYear,theurl = theurl,tz=tiz)
TidalTimes<-seq(workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)],length.out = 1000)
tidalHarmonic <- ftide(theTides$Level, theTides$Date.Time, hc60)
TidalPoints<-predict(tidalHarmonic,workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)])
#Ends the large loop
buoy <- data.frame(TidalTimes,TidalPoints)
type <- "exposed"
rate<-NULL
for(zzz in 1:nrow(workingSet)){
rate[zzz] <- workingSet[zzz+1,3]-workingSet[zzz,3]
}
time_low <- which(rate <= -1)
t_l<-which.min(rate[time_low])
time_low <- time_low[t_l]
time_high <- time_low+1
#What point is the iButton covered at?
xxx<-1
timedif<-workingSet[time_high[xxx],1]-workingSet[time_low[xxx],1]
timedif <-timedif/2
submergedtime<- workingSet[time_low[xxx],1]+timedif
timeseq<-data.frame(submergedtime)
lvl<-buoy[which.min(abs(difftime(buoy[,1],submergedtime,units="hours"))),2]
if(type=="exposed"){buoy$uw<-buoy[,2] <= lvl}else{buoy$uw<-buoy[,2] >= lvl}
zz<-unname(tapply(which(buoy$uw==TRUE), cumsum(c(1, diff(which(buoy$uw==TRUE))) != 1), range))
xx <- data.frame(zz)
for (i in 1:nrow(xx)){
start<-unlist(xx$zz[i])[1]
end<-unlist(xx$zz[i])[2]
start=buoy[start,1]
end=buoy[end,1]
workingSet$exp<-ifelse(workingSet$DateTime >= start & workingSet$DateTime <= end,"kp","rm")
assign(paste0("Mensor",i),subset(workingSet,workingSet$exp=="kp"),envir=globalenv())
}
Kept <- do.call(rbind, lapply(paste0(rep("Mensor",nrow(xx)),seq(1,nrow(xx))), get) )
Kept<-Kept[order(Kept$DateTime),]
assign(paste0("Lewes",z),Kept)
rm(list=ls(pattern="Mensor"),envir=globalenv())
}
#My Minehead Loop
for(z in 1:max(Minehead$SensorNumber)){
theYear<-year(Minehead$DateTime[1])
for(x in nrow(Minehead):1){ #Loop that gets rid of non-summer records
if(Minehead$DateTime[x]< as.Date(paste0(theYear,"-06-01"))){Minehead<-Minehead[-x,]}else
if(Minehead$DateTime[x]> as.Date(paste0(theYear,"-09-01"))){Minehead<-Minehead[-x,]}
#if(Minehead$DateTime[x]< as.Date(paste0(theYear,"-08-09"))){Minehead<-Minehead[-x,]}
} #Ends the non-summer loop
workingSet<-subset(Minehead,Minehead$SensorNumber==z)
siteNumber<-TidalSites[which(TidalSites$Site=="Minehead"),4]
tiz <- TidalSites[which(TidalSites$Site=="Minehead"),5]
theurl <- paste0("https://tides.mobilegeographics.com/calendar/year/",siteNumber,".html?y=",theYear)
theTides<-.tide.fixed(year=theYear,theurl = theurl,tz=tiz)
TidalTimes<-seq(workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)],length.out = 1000)
tidalHarmonic <- ftide(theTides$Level, theTides$Date.Time, hc60)
TidalPoints<-predict(tidalHarmonic,workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)])
#Ends the large loop
buoy <- data.frame(TidalTimes,TidalPoints)
type <- "exposed"
rate<-NULL
for(zzz in 1:nrow(workingSet)){
rate[zzz] <- workingSet[zzz+1,3]-workingSet[zzz,3]
}
time_low <- which(rate <= -1)
t_l<-which.min(rate[time_low])
time_low <- time_low[t_l]
time_high <- time_low+1
#What point is the iButton covered at?
xxx<-1
timedif<-workingSet[time_high[xxx],1]-workingSet[time_low[xxx],1]
timedif <-timedif/2
submergedtime<- workingSet[time_low[xxx],1]+timedif
timeseq<-data.frame(submergedtime)
lvl<-buoy[which.min(abs(difftime(buoy[,1],submergedtime,units="hours"))),2]
if(type=="exposed"){buoy$uw<-buoy[,2] <= lvl}else{buoy$uw<-buoy[,2] >= lvl}
zz<-unname(tapply(which(buoy$uw==TRUE), cumsum(c(1, diff(which(buoy$uw==TRUE))) != 1), range))
xx <- data.frame(zz)
for (i in 1:nrow(xx)){
start<-unlist(xx$zz[i])[1]
end<-unlist(xx$zz[i])[2]
start=buoy[start,1]
end=buoy[end,1]
workingSet$exp<-ifelse(workingSet$DateTime >= start & workingSet$DateTime <= end,"kp","rm")
assign(paste0("Mensor",i),subset(workingSet,workingSet$exp=="kp"),envir=globalenv())
}
Kept <- do.call(rbind, lapply(paste0(rep("Mensor",nrow(xx)),seq(1,nrow(xx))), get) )
Kept<-Kept[order(Kept$DateTime),]
assign(paste0("Minehead",z),Kept)
rm(list=ls(pattern="Mensor"),envir=globalenv())
}
#My Schoodic Loop
for(z in 1:max(Schoodic$SensorNumber)){
theYear<-year(Schoodic$DateTime[1])
for(x in nrow(Schoodic):1){ #Loop that gets rid of non-summer records
if(Schoodic$DateTime[x]< as.Date(paste0(theYear,"-06-01"))){Schoodic<-Schoodic[-x,]}else
if(Schoodic$DateTime[x]> as.Date(paste0(theYear,"-09-01"))){Schoodic<-Schoodic[-x,]}
#if(Schoodic$DateTime[x]< as.Date(paste0(theYear,"-08-09"))){Schoodic<-Schoodic[-x,]}
} #Ends the non-summer loop
workingSet<-subset(Schoodic,Schoodic$SensorNumber==z)
siteNumber<-TidalSites[which(TidalSites$Site=="Schoodic"),4]
tiz <- TidalSites[which(TidalSites$Site=="Schoodic"),5]
theurl <- paste0("https://tides.mobilegeographics.com/calendar/year/",siteNumber,".html?y=",theYear)
theTides<-.tide.fixed(year=theYear,theurl = theurl,tz=tiz)
TidalTimes<-seq(workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)],length.out = 1000)
tidalHarmonic <- ftide(theTides$Level, theTides$Date.Time, hc60)
TidalPoints<-predict(tidalHarmonic,workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)])
#Ends the large loop
buoy <- data.frame(TidalTimes,TidalPoints)
type <- "exposed"
rate<-NULL
for(zzz in 1:nrow(workingSet)){
rate[zzz] <- workingSet[zzz+1,3]-workingSet[zzz,3]
}
time_low <- which(rate <= -1)
t_l<-which.min(rate[time_low])
time_low <- time_low[t_l]
time_high <- time_low+1
#What point is the iButton covered at?
xxx<-1
timedif<-workingSet[time_high[xxx],1]-workingSet[time_low[xxx],1]
timedif <-timedif/2
submergedtime<- workingSet[time_low[xxx],1]+timedif
timeseq<-data.frame(submergedtime)
lvl<-buoy[which.min(abs(difftime(buoy[,1],submergedtime,units="hours"))),2]
if(type=="exposed"){buoy$uw<-buoy[,2] <= lvl}else{buoy$uw<-buoy[,2] >= lvl}
zz<-unname(tapply(which(buoy$uw==TRUE), cumsum(c(1, diff(which(buoy$uw==TRUE))) != 1), range))
xx <- data.frame(zz)
for (i in 1:nrow(xx)){
start<-unlist(xx$zz[i])[1]
end<-unlist(xx$zz[i])[2]
start=buoy[start,1]
end=buoy[end,1]
workingSet$exp<-ifelse(workingSet$DateTime >= start & workingSet$DateTime <= end,"kp","rm")
assign(paste0("Mensor",i),subset(workingSet,workingSet$exp=="kp"),envir=globalenv())
}
Kept <- do.call(rbind, lapply(paste0(rep("Mensor",nrow(xx)),seq(1,nrow(xx))), get) )
Kept<-Kept[order(Kept$DateTime),]
assign(paste0("Schoodic",z),Kept)
rm(list=ls(pattern="Mensor"),envir=globalenv())
}
#My Viana Loop
for(z in 1:max(Viana$SensorNumber)){
theYear<-year(Viana$DateTime[1])
for(x in nrow(Viana):1){ #Loop that gets rid of non-summer records
if(Viana$DateTime[x]< as.Date(paste0(theYear,"-06-01"))){Viana<-Viana[-x,]}else
if(Viana$DateTime[x]> as.Date(paste0(theYear,"-09-01"))){Viana<-Viana[-x,]}
#if(Viana$DateTime[x]< as.Date(paste0(theYear,"-08-09"))){Viana<-Viana[-x,]}
} #Ends the non-summer loop
workingSet<-subset(Viana,Viana$SensorNumber==z)
siteNumber<-TidalSites[which(TidalSites$Site=="Viana"),4]
tiz <- TidalSites[which(TidalSites$Site=="Viana"),5]
theurl <- paste0("https://tides.mobilegeographics.com/calendar/year/",siteNumber,".html?y=",theYear)
theTides<-.tide.fixed(year=theYear,theurl = theurl,tz=tiz)
TidalTimes<-seq(workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)],length.out = 1000)
tidalHarmonic <- ftide(theTides$Level, theTides$Date.Time, hc60)
TidalPoints<-predict(tidalHarmonic,workingSet$DateTime[1],workingSet$DateTime[nrow(workingSet)])
#Ends the large loop
buoy <- data.frame(TidalTimes,TidalPoints)
type <- "exposed"
rate<-NULL
for(zzz in 1:nrow(workingSet)){
rate[zzz] <- workingSet[zzz+1,3]-workingSet[zzz,3]
}
time_low <- which(rate <= -1)
t_l<-which.min(rate[time_low])
time_low <- time_low[t_l]
time_high <- time_low+1
#What point is the iButton covered at?
xxx<-1
timedif<-workingSet[time_high[xxx],1]-workingSet[time_low[xxx],1]
timedif <-timedif/2
submergedtime<- workingSet[time_low[xxx],1]+timedif
timeseq<-data.frame(submergedtime)
lvl<-buoy[which.min(abs(difftime(buoy[,1],submergedtime,units="hours"))),2]
if(type=="exposed"){buoy$uw<-buoy[,2] <= lvl}else{buoy$uw<-buoy[,2] >= lvl}
zz<-unname(tapply(which(buoy$uw==TRUE), cumsum(c(1, diff(which(buoy$uw==TRUE))) != 1), range))
xx <- data.frame(zz)
for (i in 1:nrow(xx)){
start<-unlist(xx$zz[i])[1]
end<-unlist(xx$zz[i])[2]
start=buoy[start,1]
end=buoy[end,1]
workingSet$exp<-ifelse(workingSet$DateTime >= start & workingSet$DateTime <= end,"kp","rm")
assign(paste0("Mensor",i),subset(workingSet,workingSet$exp=="kp"),envir=globalenv())
}
Kept <- do.call(rbind, lapply(paste0(rep("Mensor",nrow(xx)),seq(1,nrow(xx))), get) )
Kept<-Kept[order(Kept$DateTime),]
assign(paste0("Viana",z),Kept)
rm(list=ls(pattern="Mensor"),envir=globalenv())
}
Comparisons <- rbind(Amarosa1,Amarosa2,Cadiz1,Cadiz2,Cadiz3,Cadiz4,Cadiz5,Cadiz6,Cadiz7,Cadiz8,Halifax1,Halifax2,Halifax3,Halifax4,Lewes1,Lewes2,Lewes3,Lewes4,Minehead1,Minehead2,Minehead3,Minehead4,Viana1,Viana2,Schoodic1,Schoodic2,Schoodic3,Schoodic4,Schoodic5,Schoodic6,Schoodic7,Schoodic8,Schoodic9,Schoodic10,Schoodic11,Schoodic12,Schoodic13,Schoodic14,Beaufort1,Beaufort2,Beaufort3,Beaufort4)
Covered<-subset(Comparisons, Comparisons$CE=="Covered")
Exposed<-subset(Comparisons, Comparisons$CE=="Exposed")
Comparisons$time<-strftime(Comparisons$DateTime, format="%H:%M:%S")
ComparisonsDay <- Comparisons
ComparisonsNight <- Comparisons
for(mm in nrow(ComparisonsDay):1){
if(ComparisonsDay$time[mm] < "06:00:00"){ComparisonsDay <- ComparisonsDay[-mm,]}else
if(ComparisonsDay$time[mm] > "19:00:00"){ComparisonsDay <- ComparisonsDay[-mm,]}
}
ComparisonsNight<-ComparisonsNight[-c(which(ComparisonsNight$time > "06:00:00" & ComparisonsNight$time < "19:00:00")),]
statsResults<-data.frame(matrix(nrow=20,ncol=6))
for(q in 1:length(unique(ComparisonsDay$Site))){
Covered<-subset(ComparisonsDay, ComparisonsDay$CE=="Covered")
Exposed<-subset(ComparisonsDay, ComparisonsDay$CE=="Exposed")
}
esquisse::esquisser()
View(Schoodic1)
View(Schoodic11)
View(Schoodic14)
View(Schoodic4)
View(Beaufort1)
View(Beaufort3)
esquisse::esquisser()
esquisse::esquisser()
